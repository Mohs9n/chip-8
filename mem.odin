package main

import "core:container/queue"
import "core:fmt"
import "core:os"

ram: [4096]u8
reg: [0x10]u8
display: [64][32]u8
I: u16
PC: u16
DTimer, STimer: u8
block: u8
stack: queue.Queue(u16)


@(init)
initMem :: proc() {
	reset_state()
	// load rom
	ok: bool
	if len(os.args) > 1 do ok = load_rom(os.args[1])
	else do ok = load_rom("roms/ibm.ch8")

	assert(ok, "Error loading rom")
}

reset_state :: proc() {
	ram = {}
	reg = {}
	display = {}
	I = 0
	PC = 0x200
	DTimer, STimer = 0, 0
	block = 0
	queue.init(&stack)
	load_font()
}

load_rom :: proc(path: string) -> bool {
	rom: []byte
	ok: bool
	if rom, ok = os.read_entire_file(path); !ok {
		return false
	}

	for i in 0 ..< len(rom) {
		ram[0x200 + i] = rom[i]
	}
	return true
}

load_font :: proc() {
	font := [?]u8 {
		0xF0,
		0x90,
		0x90,
		0x90,
		0xF0,
		0x20,
		0x60,
		0x20,
		0x20,
		0x70,
		0xF0,
		0x10,
		0xF0,
		0x80,
		0xF0,
		0xF0,
		0x10,
		0xF0,
		0x10,
		0xF0,
		0x90,
		0x90,
		0xF0,
		0x10,
		0x10,
		0xF0,
		0x80,
		0xF0,
		0x10,
		0xF0,
		0xF0,
		0x80,
		0xF0,
		0x90,
		0xF0,
		0xF0,
		0x10,
		0x20,
		0x40,
		0x40,
		0xF0,
		0x90,
		0xF0,
		0x90,
		0xF0,
		0xF0,
		0x90,
		0xF0,
		0x10,
		0xF0,
		0xF0,
		0x90,
		0xF0,
		0x90,
		0x90,
		0xE0,
		0x90,
		0xE0,
		0x90,
		0xE0,
		0xF0,
		0x80,
		0x80,
		0x80,
		0xF0,
		0xE0,
		0x90,
		0x90,
		0x90,
		0xE0,
		0xF0,
		0x80,
		0xF0,
		0x80,
		0xF0,
		0xF0,
		0x80,
		0xF0,
		0x80,
		0x80,
	}

	// add font data to memory
	for i in 0 ..< len(font) {
		ram[0x050 + i] = font[i]
	}
}
